[paths]
train = "corpus/train.spacy"
dev = "corpus/eval.spacy"
vectors = null

[system]
gpu_allocator = "pytorch"
seed = 0

[nlp]
lang = "fr"
pipeline = ["tok2vec", "ner"]
batch_size = 1000

[components]

[components.tok2vec]
factory = "tok2vec"

[components.tok2vec.model]
@architectures = "spacy.Tok2Vec.v2"
embed = {"@architectures": "spacy.MultiHashEmbed.v2", "width": 96, "rows": [5000, 2000, 1000, 1000], "attrs": ["ORTH", "PREFIX", "SUFFIX", "SHAPE"], "include_static_vectors": false}
encode = {"@architectures": "spacy.MaxoutWindowEncoder.v2", "width": 96, "depth": 4, "window_size": 1, "maxout_pieces": 3}

[components.ner]
factory = "ner"

[components.ner.model]
@architectures = "spacy.TransitionBasedParser.v2"
state_type = "ner"
extra_state_tokens = false
hidden_width = 64
maxout_pieces = 2
use_upper = true
tok2vec = {"@architectures": "spacy.Tok2VecListener.v1", "width": 96}

[corpora]

[corpora.train]
@readers = "spacy.Corpus.v1"
path = ${paths.train}
max_length = 0

[corpora.dev]
@readers = "spacy.Corpus.v1"
path = ${paths.dev}
max_length = 0

[training]
seed = 0
gpu_allocator = "pytorch"
dev_corpus = "corpora.dev"
train_corpus = "corpora.train"
patience = 1600
max_steps = 20000
eval_frequency = 200

[training.optimizer]
@optimizers = "Adam.v1"

[training.batcher]
@batchers = "spacy.batch_by_words.v1"
discard_oversize = true
size = 2000
tolerance = 0.2

[training.logger]
@loggers = "spacy.ConsoleLogger.v1"
progress_bar = false

[training.optimizer.learn_rate]
@schedules = "warmup_linear.v1"
warmup_steps = 250
total_steps = 20000
initial_rate = 0.00005

[training.score_weights]
ents_f = 1.0
ents_p = 0.0
ents_r = 0.0

[corpora.train.augmenter]
@augmenters = "spacy.lower_case.v1"
level = 0.1

[corpora.dev.augmenter]
@augmenters = "spacy.lower_case.v1"
level = 0.1
